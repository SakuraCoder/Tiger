%{
#include <stdio.h>
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"
int yydebug=1;  


int yylex(void); 

void yyerror(char *s)
{
    EM_error(EM_tokPos, "%s", s);
}
%}


%union {
    int pos;
    int ival;
    string sval;
    S_symbol sym;
    A_var var;
    A_ty ty;
    A_exp expr;
    A_expList exprList;
    A_dec dec;
    A_decList decList;
    A_efield efield;
    A_efieldList efieldList;
    A_field field;
    A_fieldList fieldList;
    A_fundec fundec;
    A_fundecList fundecList;
    A_namety namety;
    A_nametyList nametyList;
}
%type <dec> dec vardec tydeclist fundeclist
%type <decList> declist
%type <expr> root expr let cond
%type <exprList> arglist arg explist
%type <efieldList> recordlist record
%type <field> tyfield
%type <fieldList> tyfieldlist tyfields
%type <fundec> fundec
%type <namety> tydec
%type <sym> id
%type <ty> ty
%type <var> lvalue

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GEAND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF BREAK NIL FUNCTION VAR TYPE 

%nonassoc LOW
%nonassoc THEN DO TYPE FUNCTION ID 
%nonassoc ASSIGN LBRACK ELSE OF COMMA
%left OR
%left AND
%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%start program
%%
program:    root                          {absyn_root=$1;}
            ;

root:       /* empty */                   {$$=NULL;}
            | expr                        {$$=$1;}
            ;

expr:       INT                           {$$=A_IntExp(EM_tokPos, $1);}
            | STRING                      {$$=A_StringExp(EM_tokPos, $1);}
            | NIL                         {$$=A_NilExp(EM_tokPos);}
            | LPAREN explist RPAREN       {$$=A_SeqExp(EM_tokPos, $2);}
            | lvalue                      {$$=A_VarExp(EM_tokPos, $1);}
            | lvalue ASSIGN expr          {$$=A_AssignExp(EM_tokPos, $1, $3);}
            | cond                        {$$=$1;}
            | let                         {$$=$1;}
            | expr OR expr                {$$=A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos,1), $3);}
            | expr AND expr               {$$=A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos,0));}
            | expr LT expr                {$$=A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
            | expr GT expr                {$$=A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
            | expr LE expr                {$$=A_OpExp(EM_tokPos, A_leOp, $1, $3);}
            | expr GE expr                {$$=A_OpExp(EM_tokPos, A_geOp, $1, $3);}
            | expr PLUS expr              {$$=A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
            | expr MINUS expr             {$$=A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
            | expr TIMES expr             {$$=A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
            | expr DIVIDE expr            {$$=A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
            | MINUS expr     %prec UMINUS {$$=A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
            | expr EQ expr                {$$=A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
            | expr NEQ expr               {$$=A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
            | id LPAREN arglist RPAREN    {$$=A_CallExp(EM_tokPos, $1, $3);}
            | id LBRACK expr RBRACK OF expr {$$=A_ArrayExp(EM_tokPos, $1, $3, $6);}
            | id LBRACE recordlist RBRACE {$$=A_RecordExp(EM_tokPos, $1, $3);}
            | BREAK                       {$$=A_BreakExp(EM_tokPos);}
            ;
recordlist: /* empty */                   {$$=NULL;}
            | record                      {$$=$1;}
            ;
record:     id EQ expr                    {$$=A_EfieldList(A_Efield($1, $3), NULL);}
            | id EQ expr COMMA record     {$$=A_EfieldList(A_Efield($1, $3), $5);}
            ;

let:        LET declist IN explist END    {$$=A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}
            ;

arglist:    /* empty */                   {$$=NULL;}
            | arg                         {$$=$1;}
            ;
      
arg:        expr                          {$$=A_ExpList($1, NULL);}
            | expr COMMA arg              {$$=A_ExpList($1, $3);}
            ;

declist:    /* empty */                   {$$=NULL;}
            | dec declist                 {$$=A_DecList($1, $2);}
            ;

dec:        tydeclist                     {$$=$1;}
            | vardec                      {$$=$1;}
            | fundeclist                  {$$=$1;}
            ;

tydeclist:  tydec       %prec LOW         {$$=A_TypeDec(EM_tokPos, A_NametyList($1, NULL));}
            | tydec tydeclist             {$$=A_TypeDec(EM_tokPos, A_NametyList($1, $2->u.type));}
            ;

tydec:      TYPE id EQ ty                 {$$=A_Namety($2, $4);}
            ;

ty:         id                            {$$=A_NameTy(EM_tokPos, $1);}
            | LBRACE tyfieldlist RBRACE   {$$=A_RecordTy(EM_tokPos, $2);}
            | ARRAY OF id                 {$$=A_ArrayTy(EM_tokPos, $3);}
            ;

tyfieldlist:/* empty */                   {$$=NULL;}
            | tyfields                    {$$=$1;}
            ;

tyfields:   tyfield                       {$$=A_FieldList($1, NULL);}
            | tyfield COMMA tyfields      {$$=A_FieldList($1, $3);}
            ;

tyfield:    id COLON id                   {$$=A_Field(EM_tokPos, $1, $3);}
            ;

vardec:     VAR id ASSIGN expr            {$$=A_VarDec(EM_tokPos, $2, NULL, $4);}
            | VAR id COLON id ASSIGN expr {$$=A_VarDec(EM_tokPos, $2, $4, $6);}
            ;

id:         ID                            {$$=S_Symbol($1);}
            ;


lvalue:     id                %prec LOW   {$$=A_SimpleVar(EM_tokPos, $1);}
            | id LBRACK expr RBRACK       {$$=A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, $1), $3);}
            | lvalue LBRACK expr RBRACK   {$$=A_SubscriptVar(EM_tokPos, $1, $3);}
            | lvalue DOT id               {$$=A_FieldVar(EM_tokPos, $1, $3);}
            ;

explist:    /* empty */                   {$$=NULL;}      
            | expr                        {$$=A_ExpList($1, NULL);}
            | expr SEMICOLON explist      {$$=A_ExpList($1, $3);}
            ;


fundeclist: fundec      %prec LOW         {$$=A_FunctionDec(EM_tokPos, A_FundecList($1, NULL));}
            | fundec fundeclist           {$$=A_FunctionDec(EM_tokPos, A_FundecList($1, $2->u.function));}
            ;

fundec:     FUNCTION id LPAREN tyfieldlist RPAREN EQ expr            {$$=A_Fundec(EM_tokPos, $2, $4, NULL, $7);}
            | FUNCTION id LPAREN tyfieldlist RPAREN COLON id EQ expr {$$=A_Fundec(EM_tokPos, $2, $4, $7, $9);}
            ;

cond:       IF expr THEN expr ELSE expr                           {$$=A_IfExp(EM_tokPos, $2, $4, $6);}
            | IF expr THEN expr                                   {$$=A_IfExp(EM_tokPos, $2, $4, NULL);}
            | WHILE expr DO expr                                  {$$=A_WhileExp(EM_tokPos, $2, $4);}
            | FOR id ASSIGN expr TO expr DO expr                  {$$=A_ForExp(EM_tokPos, $2, $4, $6, $8);}
            ;
